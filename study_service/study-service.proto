syntax = "proto3";

package influenzanet.study_service;

option go_package = "github.com/influenzanet/study-service/pkg/api";

import "shared/auth_info.proto";
import "study_service/study.proto";
import "study_service/exporter.proto";
import "study_service/survey.proto";
import "study_service/expression.proto";
import "study_service/survey-response.proto";
import "study_service/participant-state.proto";
import "study_service/report.proto";
import "google/protobuf/empty.proto";

service StudyServiceApi {
  rpc Status(google.protobuf.Empty) returns (ServiceStatus);

  // Study flow
  rpc EnterStudy(EnterStudyRequest) returns (AssignedSurveys);
  rpc GetAssignedSurveys(influenzanet.shared.TokenInfos)
      returns (AssignedSurveys);
  rpc GetAssignedSurvey(SurveyReferenceRequest) returns (SurveyAndContext);
  rpc SubmitResponse(SubmitResponseReq) returns (AssignedSurveys);
  rpc LeaveStudy(LeaveStudyMsg) returns (AssignedSurveys);
  rpc ProfileDeleted(influenzanet.shared.TokenInfos) returns (ServiceStatus);
  rpc DeleteParticipantData(influenzanet.shared.TokenInfos)
      returns (ServiceStatus);
  rpc UploadParticipantFile(stream UploadParticipantFileReq) returns (FileInfo);
  rpc DeleteParticipantFiles(DeleteParticipantFilesReq) returns (ServiceStatus);
  rpc GetParticipantFile(GetParticipantFileReq) returns (stream Chunk);
  rpc RegisterTemporaryParticipant(RegisterTempParticipantReq) returns (RegisterTempParticipantResponse);
  rpc ConvertTemporaryToParticipant(ConvertTempParticipantReq) returns (ServiceStatus);
  rpc GetAssignedSurveysForTemporaryParticipant(GetAssignedSurveysForTemporaryParticipantReq)
      returns (AssignedSurveys);

  rpc CreateReport(CreateReportReq) returns (ServiceStatus);

  // for all profiles (also not active studies):
  rpc GetStudiesForUser(GetStudiesForUserReq) returns (StudiesForUser);
  // all active studies even if user not in:
  rpc GetActiveStudies(influenzanet.shared.TokenInfos) returns (Studies);
  // get info about surveys in a study:
  rpc GetStudySurveyInfos(StudyReferenceReq) returns (SurveyInfoResp);
  // any user profile is in the study and one state matches condition:
  rpc HasParticipantStateWithCondition(ProfilesWithConditionReq)
      returns (ServiceStatus);
  rpc GetParticipantMessages(GetParticipantMessagesReq) returns (StudyMessages);
  rpc GetResearcherMessages(GetReseacherMessagesReq) returns (StudyMessages);
  rpc DeleteMessagesFromParticipant(DeleteMessagesFromParticipantReq)
      returns (ServiceStatus);
  rpc DeleteResearcherMessages(DeleteResearcherMessagesReq)
      returns (ServiceStatus);
  rpc GetReportsForUser(GetReportsForUserReq) returns (ReportHistory);
  rpc RemoveConfidentialResponsesForProfiles(RemoveConfidentialResponsesForProfilesReq) returns (ServiceStatus);

  // ---> Study management
  rpc CreateNewStudy(NewStudyRequest) returns (Study);
  rpc GetAllStudies(influenzanet.shared.TokenInfos) returns (Studies);
  rpc GetStudy(StudyReferenceReq) returns (Study);
  // add, update and remove study members (and roles):
  rpc SaveStudyMember(StudyMemberReq) returns (Study);
  rpc RemoveStudyMember(StudyMemberReq) returns (Study);
  rpc GetResearcherNotificationSubscriptions(GetResearcherNotificationSubscriptionsReq) returns (NotificationSubscriptions);
  rpc UpdateResearcherNotificationSubscriptions(UpdateResearcherNotificationSubscriptionsReq) returns (NotificationSubscriptions);
  rpc GetStudiesWithPendingParticipantMessages(GetStudiesWithPendingParticipantMessagesReq) returns (Studies);
  rpc SaveStudyStatus(StudyStatusReq) returns (Study);
  rpc SaveStudyProps(StudyPropsReq) returns (Study);
  rpc SaveStudyRules(StudyRulesReq) returns (Study);
  rpc GetCurrentStudyRules(StudyReferenceReq) returns (StudyRules);
  rpc GetStudyRulesHistory(StudyRulesHistoryReq) returns (StudyRulesHistory);
  rpc RemoveStudyRulesVersion(StudyRulesVersionReferenceReq) returns (ServiceStatus);

  rpc SaveSurveyToStudy(AddSurveyReq) returns (Survey);
  rpc GetSurveyVersionInfos(SurveyReferenceRequest) returns (SurveyVersions);
  rpc GetSurveyKeys(GetSurveyKeysRequest) returns (SurveyKeys);
  rpc GetSurveyDefForStudy(SurveyVersionReferenceRequest) returns (Survey); // to get one survey definition (latest or specific version id)
  rpc RemoveSurveyVersion(SurveyVersionReferenceRequest) returns (ServiceStatus); // remove one specific key and version id
  rpc UnpublishSurvey(SurveyReferenceRequest) returns (ServiceStatus); // unpublish survey by survey key

  rpc DeleteStudy(StudyReferenceReq) returns (ServiceStatus);

  rpc RunRules(StudyRulesReq) returns (RuleRunSummary);
  rpc RunRulesForSingleParticipant(RunRulesForSingleParticipantReq) returns (RuleRunSummary);
  rpc RunRulesForPreviousResponses(RunRulesForPreviousResponsesReq) returns (RuleRunSummary);
  // <---

  // Data access:
  rpc GetStudyResponseStatistics(SurveyResponseQuery)
      returns (StudyResponseStatistics);
  rpc StreamStudyResponses(SurveyResponseQuery) returns (stream SurveyResponse);
  rpc StreamParticipantStates(ParticipantStateQuery) returns (stream ParticipantState);
  rpc GetParticipantStatesWithPagination(GetPStatesWithPaginationQuery) returns (ParticipantStatesWithPagination);
  rpc GetParticipantStateByID(ParticipantStateByIDQuery) returns (ParticipantState);
  rpc StreamReportHistory(ReportHistoryQuery) returns (stream Report);
  rpc StreamParticipantFileInfos(FileInfoQuery) returns (stream FileInfo);

  rpc GetConfidentialResponses(ConfidentialResponsesQuery) returns (ConfidentialResponses);
  rpc GetResponsesWideFormatCSV(ResponseExportQuery) returns (stream Chunk);
  rpc GetResponsesLongFormatCSV(ResponseExportQuery) returns (stream Chunk);
  rpc GetResponsesFlatJSON(ResponseExportQuery) returns (stream Chunk);
  rpc GetResponsesFlatJSONWithPagination(ResponseExportQuery) returns (stream PaginatedFile);
  rpc GetSurveyInfoPreviewCSV(SurveyInfoExportQuery) returns (stream Chunk);
  rpc GetSurveyInfoPreview(SurveyInfoExportQuery) returns (SurveyInfoExport);
}

message StudiesForUser { repeated StudyForUser studies = 1; }

message FileType {
  string type = 1;
  string subtype = 2;
  string value = 3;
}

message UploadParticipantFileReq {
  message Info {
    influenzanet.shared.TokenInfos token = 1;
    string study_key = 2;
    string sub_study = 3;

    oneof participant {
      string profile_id = 4;
      string participant_id = 5; // if researcher upload for participant directly
    }

    FileType file_type = 6;
    bool visible_to_participant = 7;
  }

  oneof data {
    Info info = 1;
    bytes chunk = 2;
  }
}

message PaginatedFile {
  oneof data {
    PaginationInfo info = 1;
    bytes chunk = 2;
  }
}

message PaginationInfo {
  int32 item_count = 1;
  int32 page_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message GetParticipantFileReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string file_id = 3;
}

message Subscription {
  string message_type = 1;
  string email = 2;
}

message NotificationSubscriptions {
  repeated Subscription subscriptions = 1;
}

message UpdateResearcherNotificationSubscriptionsReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  repeated Subscription subscriptions = 3;
}

message GetResearcherNotificationSubscriptionsReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
}

message DeleteParticipantFilesReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  repeated string file_ids = 3;
}

message FileObjectReference {
  string id = 1; // DB id of the resource
  string type = 2; // it is referenced by survey response, or other object (like study)
  int64 time = 3; // when reference was created
}

message FileInfo {
  string id = 1;
  string participant_id = 2;
  string uploaded_by = 3; // if not uploaded by the participant
  string status = 4;
  string path = 5;
  string preview_path = 6;
  string sub_study = 7;
  int64 submitted_at = 8;
  string file_type = 9;
  bool visible_to_participant = 10;
  string name = 11;
  repeated FileObjectReference referenced_in = 12;
  int32 size = 13;
}

message FileInfos {
  repeated FileInfo file_infos = 1;
}


message SurveyResponseQuery {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string survey_key = 3;
  int64 from = 4;
  int64 until = 5;
  // to query specific survey engine versions for example:
  map<string, string> context_query = 6;
}

message ReportHistoryQuery {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string report_key = 3;
  int64 from = 4;
  int64 until = 5;
  string participant_id = 6;
}

message FileInfoQuery {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string file_type = 3;
  int64 from = 4;
  int64 until = 5;
  string participant_id = 6;
}

message ParticipantStateQuery {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string status = 3;
}

message ParticipantStateByIDQuery {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string participant_id = 3;
}

message GetPStatesWithPaginationQuery {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string query = 3;
  int32 page_size = 4;
  int32 page = 5;
  map<string, int32> sort_by = 6;
}

message ParticipantStatesWithPagination {
  int32 item_count = 1;
  int32 page_count = 2;
  int32 page = 3;
  repeated ParticipantState items = 4;
  int32 page_size = 5;
}

message StudyResponseStatistics {
  string study_key = 1;
  map<string, int64> survey_response_counts = 6;
}

message ProfilesWithConditionReq {
  string instance_id = 1;
  string studyKey = 2;
  repeated string profile_ids = 3;
  // evaluate this expression for profiles if and until any of them fulfilles
  ExpressionArg condition = 4;
}

message GetParticipantMessagesReq {
  string instance_id = 1;
  string studyKey = 2;
  string profile_id = 3;
}

message GetReseacherMessagesReq {
  string instance_id = 1;
}

message GetStudiesWithPendingParticipantMessagesReq {
  string instance_id = 1;
}

message StudyMessage {
  string id = 1;
  string type = 2;
  // optional:
  map<string, string> payload = 3;
  string study_key = 4;
  string participant_id = 5;
  repeated string send_to = 6; // for researcher notifications
}

message StudyMessages {
  repeated StudyMessage messages = 1;
}

message DeleteMessagesFromParticipantReq {
  string instance_id = 1;
  string studyKey = 2;
  string profile_id = 3;
  repeated string message_ids = 4;
}

message DeleteResearcherMessagesReq {
  string instance_id = 1;
  string studyKey = 2;
  repeated string message_ids = 3;
}

message ServiceStatus {
  enum StatusValue {
    NORMAL = 0;
    PROBLEM = 1;
  }
  StatusValue status = 1;
  string msg = 2;
  string version = 3;
}

message NewStudyRequest {
  influenzanet.shared.TokenInfos token = 1;
  Study study = 2;
}

message SurveyAndContext {
  Survey survey = 1;
  SurveyContext context = 2;
  SurveyResponse prefill = 3;
  string temporary_participant_id = 4;
}

message StudyReferenceReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
}

message StudyRulesHistoryReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  int64 since = 3;
  int64 until = 4;
  int32 page_size = 5;
  int32 page = 6;
  bool descending = 7;
}

message SurveyInfoResp { repeated SurveyInfo infos = 1; }

message AddSurveyReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  Survey survey = 3;
}

message SubmitResponseReq {
  influenzanet.shared.TokenInfos token = 1;
  // identifies the user who is submitting
  string study_key = 2;
  SurveyResponse response = 3;
  string profile_id = 4;
  // When subbmitting for temp participant:
  string instance_id = 5;
  string temporary_participant_id = 6;
  int64 temporary_participant_timestamp = 7;
}

message EnterStudyRequest {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string profile_id = 3;
}

message LeaveStudyMsg {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string profile_id = 3;
}

message SurveyVersions {
  repeated Survey survey_versions = 1;
}

message SurveyReferenceRequest {
  string instance_id = 1;
  string study_key = 2;
  string survey_key = 3;
  string profile_id = 4;
  influenzanet.shared.TokenInfos token = 5;
  string temporary_participant_id = 6;
}

message StudyRulesVersionReferenceReq {
  influenzanet.shared.TokenInfos token = 1;
  string id = 2;
}

message SurveyVersionReferenceRequest {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string survey_key = 3;
  string version_id = 4;
}

message GetSurveyKeysRequest {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  bool include_unpublished = 3;
}

message SurveyKeys {
  repeated string keys = 1;
}

message CreateReportReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string profile_id = 3;
  Report report = 4;
}

message GetReportsForUserReq {
  influenzanet.shared.TokenInfos token = 1;
  repeated string only_for_profiles = 2; // if not defined return for all profiles
  repeated string only_for_studies = 3; // if not defined return for all profiles
  string report_key_filter = 4; // if only one report key should be looked up
  int64 from = 5; // optional time filters
  int64 until = 6;
  repeated string ignore_reports = 7; // don't send back these reports
}

message RemoveConfidentialResponsesForProfilesReq {
  influenzanet.shared.TokenInfos token = 1;
  repeated string for_profiles = 2; // if not defined remove for all profiles
}

message ReportHistory {
  repeated Report reports = 1;
}

message GetStudiesForUserReq { influenzanet.shared.TokenInfos token = 1; }

message Studies { repeated Study studies = 1; }

message StudyMemberReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  Study.Member member = 3;
}

message StudyRulesReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  repeated Expression rules = 3;
}

message RunRulesForSingleParticipantReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string participant_id = 3;
  repeated Expression rules = 4;
}

message RunRulesForPreviousResponsesReq {
  message ResponseFilter {
    repeated string survey_keys = 1;
    repeated string participant_ids = 2;
    repeated string participant_status = 3;
    int64 from = 4;
    int64 until = 5;
  }

  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  repeated Expression rules = 3;
  ResponseFilter filter = 4;
}

message StudyStatusReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string new_status = 3;
}

message StudyPropsReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  Study.Props props = 3;
}

message RuleRunSummary {
  int32 participant_count = 1;
  repeated int32 participant_state_change_per_rule = 2;
  int64 duration = 3;
}

message ConvertTempParticipantReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string profile_id = 3;
  string temporary_participant_id = 4;
  int64 timestamp = 5; // second piece of info to confirm knowledge of the participant
}

message RegisterTempParticipantReq {
  string instance_id = 1;
  string study_key = 2;
}

message RegisterTempParticipantResponse {
  string temporary_participant_id = 1;
  int64 timestamp = 2;
}

message GetAssignedSurveysForTemporaryParticipantReq {
  string instance_id = 1;
  string study_key = 2;
  string temporary_participant_id = 3;
}

message ConfidentialResponsesQuery {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  repeated string participant_ids = 3;
  Expression condition = 4;
  string key_filter = 5; // optional key filter to retrieve only for this one
}

message ConfidentialResponses {
  repeated SurveyResponse responses = 1;
}