syntax = "proto3";

package influenzanet.user_management_api;
option go_package = "github.com/influenzanet/user-management-service/pkg/api";

import "user_management/user.proto";
import "shared/auth_info.proto";
import "google/protobuf/empty.proto";

service UserManagementApi {
  rpc Status(google.protobuf.Empty) returns (ServiceStatus);

  // Auth and Token handling:
  rpc SendVerificationCode(SendVerificationCodeReq) returns (ServiceStatus);
  rpc AutoValidateTempToken(AutoValidateReq) returns (AutoValidateResponse);
  rpc LoginWithEmail(LoginWithEmailMsg) returns (LoginResponse);
  rpc LoginWithExternalIDP(LoginWithExternalIDPMsg) returns (LoginResponse);

  rpc SignupWithEmail(SignupWithEmailMsg) returns (TokenResponse);
  rpc ValidateJWT(JWTRequest) returns (influenzanet.shared.TokenInfos);
  rpc RenewJWT(RefreshJWTRequest) returns (TokenResponse);
  rpc RevokeAllRefreshTokens(RevokeRefreshTokensReq) returns (ServiceStatus);

  rpc VerifyContact(TempToken) returns (inf.user.User);
  rpc ResendContactVerification(ResendContactVerificationReq)
      returns (ServiceStatus);

  rpc ValidateAppToken(AppTokenRequest) returns (AppTokenValidation);

  // Temporary Tokens handling:
  rpc GetOrCreateTemptoken(influenzanet.shared.TempTokenInfo)
      returns (TempToken);
  rpc GenerateTempToken(influenzanet.shared.TempTokenInfo) returns (TempToken);
  rpc GetTempTokens(influenzanet.shared.TempTokenInfo) returns (
      influenzanet.shared.TempTokenInfos); // by user_id, instance and/or type
  rpc DeleteTempToken(TempToken) returns (ServiceStatus);
  rpc PurgeUserTempTokens(influenzanet.shared.TempTokenInfo)
      returns (ServiceStatus);

  // User properties:
  rpc GetUser(UserReference) returns (inf.user.User);

  // Account methods:
  rpc ChangePassword(PasswordChangeMsg) returns (ServiceStatus);
  rpc ChangeAccountIDEmail(EmailChangeMsg) returns (inf.user.User);
  rpc DeleteAccount(UserReference) returns (ServiceStatus);
  rpc ChangePreferredLanguage(LanguageChangeMsg) returns (inf.user.User);

  // PW reset:
  rpc InitiatePasswordReset(InitiateResetPasswordMsg) returns (ServiceStatus);
  rpc GetInfosForPasswordReset(GetInfosForResetPasswordMsg)
      returns (UserInfoForPWReset);
  rpc ResetPassword(ResetPasswordMsg) returns (ServiceStatus);

  // Profile methods:
  rpc SaveProfile(ProfileRequest)
      returns (inf.user.User); // add or update a profle
  rpc RemoveProfile(ProfileRequest) returns (inf.user.User);

  // Contacts:
  rpc UseUnsubscribeToken(TempToken) returns (ServiceStatus);
  rpc UpdateContactPreferences(ContactPreferencesMsg) returns (inf.user.User);
  rpc AddEmail(ContactInfoMsg) returns (inf.user.User);
  rpc RemoveEmail(ContactInfoMsg) returns (inf.user.User);

  // Management Methods:
  rpc CreateUser(CreateUserReq) returns (inf.user.User);
  rpc AddRoleForUser(RoleMsg) returns (inf.user.User);
  rpc RemoveRoleForUser(RoleMsg) returns (inf.user.User);
  rpc FindNonParticipantUsers(FindNonParticipantUsersMsg) returns (UserListMsg);
  rpc StreamUsers(StreamUsersMsg) returns (stream inf.user.User);
}

/*
 * Status is typically used as a return value indicating if the method was
 * performed normally, or the system has any internal error e.g. checking system
 * status of a service
 */
message ServiceStatus {
  enum StatusValue {
    NORMAL = 0;
    PROBLEM = 1;
  }
  StatusValue status = 1;
  string msg = 2;
  string version = 3;
}

message SignupWithEmailMsg {
  string email = 1;
  string password = 2;
  string instance_id = 3;
  string preferred_language = 4;
  bool wants_newsletter = 5;
  bool use_2fa = 6;
  string info_check = 7;
}

message LoginWithEmailMsg {
  string email = 1;
  string password = 2;
  string instance_id = 3;
  bool as_participant = 4;
  string verification_code = 5;
}

message LoginWithExternalIDPMsg {
  string instance_id = 1;
  string email = 2;
  string role = 3;
  string customer = 4;
  string idp = 5;
  string group_info = 6;
}

message AutoValidateReq {
  string temp_token = 1;
  string access_token = 2;
}

message AutoValidateResponse {
  string account_id = 1;
  string verification_code = 2;
  bool is_same_user = 3;
  string instance_id = 4;
}

message SendVerificationCodeReq {
  string email = 1;
  string password = 2;
  string instance_id = 3;
}

message LoginResponse {
  TokenResponse token = 1;
  inf.user.User user = 2;
  bool second_factor_needed = 3;
}

message UserReference {
  influenzanet.shared.TokenInfos token = 1;
  string user_id = 2;
  string instance_id = 3;
}

message RevokeRefreshTokensReq { influenzanet.shared.TokenInfos token = 1; }

message RefreshTokenRequest {
  string user_id = 1;
  string instance_id = 2;
  string refresh_token = 3;
}

message AppTokenRequest { string token = 1; }
message AppTokenValidation { repeated string instances = 1; }

message ProfileRequest {
  influenzanet.shared.TokenInfos token = 1;
  inf.user.Profile profile = 2;
}

message UserAuthInfo {
  string user_id = 1;
  repeated string roles = 2;
  string instance_id = 3;
  string account_id = 4; // e.g. email address
  repeated inf.user.Profile profiles = 5;
  inf.user.Profile selected_profile = 6;
  bool account_confirmed = 7;
  string preferred_language = 8;
}

message ResendContactVerificationReq {
  influenzanet.shared.TokenInfos token = 1;
  string type = 2;
  string address = 3;
}

message PasswordChangeMsg {
  influenzanet.shared.TokenInfos token = 1;
  string old_password = 2;
  string new_password = 3;
}

message InitiateResetPasswordMsg {
  string instance_id = 1;
  string account_id = 2;
}

message GetInfosForResetPasswordMsg { string token = 1; }
message UserInfoForPWReset { string account_id = 1; }

message ResetPasswordMsg {
  string token = 1;
  string new_password = 2;
}

message EmailChangeMsg {
  influenzanet.shared.TokenInfos token = 1;
  string new_email = 2;
  bool keep_old_email = 3;
  string password = 4;
}

message LanguageChangeMsg {
  influenzanet.shared.TokenInfos token = 1;
  string language_code = 2;
}

message ContactPreferencesMsg {
  influenzanet.shared.TokenInfos token = 1;
  inf.user.ContactPreferences contact_preferences = 2;
}

message ContactInfoMsg {
  influenzanet.shared.TokenInfos token = 1;
  inf.user.ContactInfo contact_info = 2;
}

message JWTRequest { string token = 1; }

message RefreshJWTRequest {
  string refresh_token = 1;
  string access_token = 2;
}

message CreateUserReq {
  influenzanet.shared.TokenInfos token = 1;
  string account_id = 2;
  string initial_password = 3;
  string preferred_language = 4;
  repeated string roles = 5;
  bool use_2fa = 6;
  repeated string profile_names = 7; // Optional list of profiles that should be added for the user right at creation. First entry will be the main profiles name.

  // When migrating previous account, that should not be confirmed
  int64 account_confirmed_at = 8;
  int64 created_at = 9;
}

message RoleMsg {
  influenzanet.shared.TokenInfos token = 1;
  string account_id = 2;
  string role = 3;
}

message StreamUsersMsg {
  string instance_id = 1;

  message Filters {
    bool use_reminder_weekday_filter = 1;
    int32 reminder_weekday = 2;

    bool only_confirmed_accounts = 3;
  }
  Filters filters = 2;
}

message FindNonParticipantUsersMsg { influenzanet.shared.TokenInfos token = 1; }

message UserListMsg { repeated inf.user.User users = 1; }

message TempToken { string token = 1; }

message TokenResponse {
  string access_token = 1;
  string refresh_token = 2;
  int32 expires_in = 3;
  repeated inf.user.Profile profiles = 4;
  string selected_profile_id = 5;
  string preferred_language = 6;
  bool account_confirmed = 7;
}
