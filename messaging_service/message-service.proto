syntax = "proto3";

package influenzanet.message_service;
option go_package = "github.com/influenzanet/messaging-service/pkg/api/messaging_service";

import "google/protobuf/empty.proto";
import "shared/auth_info.proto";

service MessagingServiceApi {
  rpc Status(google.protobuf.Empty) returns (ServiceStatus);

  rpc SendInstantEmail(SendEmailReq) returns (ServiceStatus);
  rpc SendMessageToAllUsers(SendMessageToAllUsersReq) returns (ServiceStatus);
  rpc SendMessageToStudyParticipants(SendMessageToStudyParticipantsReq)
      returns (ServiceStatus);

  rpc GetAutoMessages(GetAutoMessagesReq) returns (AutoMessages);
  rpc SaveAutoMessage(SaveAutoMessageReq) returns (AutoMessage);
  rpc DeleteAutoMessage(DeleteAutoMessageReq) returns (ServiceStatus);

  rpc GetEmailTemplates(GetEmailTemplatesReq) returns (EmailTemplates);
  rpc SaveEmailTemplate(SaveEmailTemplateReq) returns (EmailTemplate);
  rpc DeleteEmailTemplate(DeleteEmailTemplateReq) returns (ServiceStatus);
}

/*
 * Status is typically used as a return value indicating if the method was
 * performed normally, or the system has any internal error e.g. checking system
 * status of a service
 */
message ServiceStatus {
  enum StatusValue {
    NORMAL = 0;
    PROBLEM = 1;
  }
  StatusValue status = 1;
  string msg = 2;
  string version = 3;
}

message SendMessageToAllUsersReq {
  influenzanet.shared.TokenInfos token = 1;
  EmailTemplate template = 2;
  bool ignore_weekday = 3;
  string label = 4; // short description to describe intent of the message, if empty a default label is used
}

message SendMessageToStudyParticipantsReq {
  influenzanet.shared.TokenInfos token = 1;
  EmailTemplate template = 2;
  string study_key = 3;
  ExpressionArg condition = 4;
  bool ignore_weekday = 5;
  string label = 6; // short description to describe intent of the message, if empty a default label is used
}

message SendEmailReq {
  string instance_id = 1;
  repeated string to = 2;
  string message_type = 3;
  string study_key = 4;
  string preferred_language = 5;
  map<string, string> content_infos = 6;
  bool use_low_prio = 7;
}

message AutoMessage {
  string id = 1;
  EmailTemplate template = 2;
  string type = 3; // all-users - study-participants
  string study_key = 4;
  ExpressionArg condition = 5;
  int64 next_time = 6; // when is the next time the message should be triggered
  int64 period = 7;    // how often it should be triggered
  string label = 8; // short description to describe intent of the message
}

message AutoMessages { repeated AutoMessage auto_messages = 1; }

message GetAutoMessagesReq { influenzanet.shared.TokenInfos token = 1; }
message SaveAutoMessageReq {
  influenzanet.shared.TokenInfos token = 1;
  AutoMessage auto_message = 2;
}

message DeleteAutoMessageReq {
  influenzanet.shared.TokenInfos token = 1;
  string auto_message_id = 2;
}

message EmailTemplate {
  string id = 1;
  string message_type = 2;
  string study_key = 3;
  string default_language = 4;
  repeated LocalizedTemplate translations = 5;
  HeaderOverrides header_overrides = 6;
}

message HeaderOverrides {
  string from = 1;
  string sender = 2;
  repeated string reply_to = 3;
  bool no_reply_to = 4;
}

message LocalizedTemplate {
  string lang = 1;
  string template_def = 2;
  string subject = 3;
}

message EmailTemplates { repeated EmailTemplate templates = 1; }

message GetEmailTemplatesReq { influenzanet.shared.TokenInfos token = 1; }

message SaveEmailTemplateReq {
  influenzanet.shared.TokenInfos token = 1;
  EmailTemplate template = 2;
}

message DeleteEmailTemplateReq {
  influenzanet.shared.TokenInfos token = 1;
  string study_key = 2;
  string message_type = 3;
}

message Expression {
  string name = 1;
  string returnType = 2;
  repeated ExpressionArg data = 3;
}

message ExpressionArg {
  string dtype = 1;
  oneof data {
    Expression exp = 2;
    string str = 3;
    double num = 4;
  }
}